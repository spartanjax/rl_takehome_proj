import os
import re
import base64
from fpdf import FPDF
from fpdf.fonts import FontFace
from fpdf.enums import XPos, YPos
from datetime import datetime, timezone
from zoneinfo import ZoneInfo
from io import BytesIO
from PIL import Image


#Embedded logo file as base64
logo_b64 = """

"""

# Get inputted filename --> create filepath
def get_filename():
    filename = input("Please enter filename: ").strip()
    
    #Error/edgecase handling
    filename = re.sub(r'[<>:"/\\|?*]', '', filename) 
    if filename == '':
        filename = 'untitled'
        
    os.makedirs("output", exist_ok=True)
    filepath = os.path.join("output", filename+".pdf")

    # Handle same name edge case
    if os.path.exists(filepath):
        overwrite = input(f"File '{filename}' already exists. Overwrite? (y/n): ").strip().lower()
        if overwrite != "y":
            print("File not overwritten.")
            return None, None

    return filename, filepath

# Fetches the current time in UTC and NZT
def get_times():
    utc = datetime.now(timezone.utc)
    nzt = utc.astimezone(ZoneInfo("Pacific/Auckland"))
    return utc, nzt

#Creates the PDF document
def create_pdf(filename, filepath, utc, nzt):
    pdf = FPDF()
    pdf.add_page()

    # Title
    pdf.set_font("Helvetica", style="B", size=20)
    pdf.multi_cell(145, 15, f"Rocket Lab's '{filename}' Document:", align="L",new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    # Time info
    pdf.set_font("Helvetica", style="B", size=12)
    pdf.cell(40, 10, "Time created:", new_x=XPos.LMARGIN)
    pdf.set_font("Helvetica", size=12)
    pdf.set_x(44)
    pdf.cell(40, 10, f"NZT: {nzt.strftime('%Y-%m-%d %H:%M:%S')}")
    pdf.set_x(97)
    pdf.cell(40, 10, f"| UTC: {utc.strftime('%Y-%m-%d %H:%M:%S')}")

    # Logo
    logo_file = BytesIO(base64.b64decode(logo_b64))
    img = Image.open(logo_file)
    image_final = BytesIO()
    img.save(image_final, format='PNG')
    image_final.seek(0)
    pdf.image(image_final, x=160, y=16, w=40) 

    # Horizontal line
    pdf.line(10, pdf.get_y()+10, 200, pdf.get_y()+10)

    # Greeting text
    pdf.set_font("Helvetica", style="I", size=12)
    pdf.ln(10)
    pdf.cell(0, 10, "Hello from Jackson Fontaine! *insert file information here*", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    # Save file
    pdf.output(filepath)
    
def main():
    # try:
    filename, filepath = get_filename()
    if not filename:
        return
    utc, nzt = get_times()
    create_pdf(filename, filepath, utc, nzt)
    print(f"PDF generated: {filepath}")

    # except Exception as e:
        # print("An error occurred while generating PDF. Please try again.")
        # print(e)

if __name__ == "__main__":
    main()
